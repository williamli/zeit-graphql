#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+STARTUP: overview
#+Title: [[https://github.com/zeusdeux/zeit-graphql][Zeit APIs over GraphQL]]

* GETs [5/20]
** DONE [[https://zeit.co/docs/api/#endpoints/deployments/list-deployments][List Deployments]]
   - State "DONE"       from "INPROGRESS" [2019-03-14 Thu 17:20]
   - State "INPROGRESS" from "TODO"       [2019-03-12 Tue 15:30]
   ~GET /v3/now/deployments~
** DONE [[https://zeit.co/docs/api/#endpoints/deployments/get-a-single-deployment][Get a Single Deployment]]
   - State "DONE"       from "INPROGRESS" [2019-03-16 Sat 03:53]
   - State "INPROGRESS" from "TODO"       [2019-03-16 Sat 02:17]
   ~GET /v6/now/deployments/:id~
** DONE [[https://zeit.co/docs/api/#endpoints/deployments/list-deployment-files][List Deployment Files]]
   - State "DONE"       from "INPROGRESS" [2019-03-17 Sun 19:49]
   - State "INPROGRESS" from "DONE"       [2019-03-17 Sun 18:45]
   - State "DONE"       from "INPROGRESS" [2019-03-17 Sun 18:41]
   - State "INPROGRESS" from "TODO"       [2019-03-17 Sun 16:57]
   ~GET /v5/now/deployments/:id/files~
** DONE [[https://zeit.co/docs/api/#endpoints/deployments/get-single-file-contents][Get Single File Contents]]
   - State "DONE"       from "ONHOLD"     [2019-03-18 Mon 19:06]
   - State "ONHOLD" from "INPROGRESS" [2019-03-18 Mon 17:39] \\
     Thinking about the graphql schema as whole from a consumers
     perspective, trying to figure out if this should be nested under
     =files= or should deployment root field have a new =file=
     field. Gotta think this through
   - State "INPROGRESS" from "TODO"       [2019-03-18 Mon 17:32]
   ~GET /v5/now/deployments/:id/files/:fileId~
** DONE [[https://zeit.co/docs/api/#endpoints/deployments/list-builds][List Builds]]
   - State "DONE"       from "INPROGRESS" [2019-03-19 Tue 19:39]
   - State "INPROGRESS" from "TODO"       [2019-03-19 Tue 18:02]
   ~GET /v5/now/deployments/:id/builds~
** TODO Add builds under ~deployment~ root field
** TODO [[https://zeit.co/docs/api/#endpoints/logs/get-deployment-logs][Get Deployment Logs]]
   ~GET /v2/now/deployments/:id/events~
** TODO [[https://zeit.co/docs/api/#endpoints/domains/list-all-the-domains][List all the Domains]]
   ~GET /v4/domains~
** TODO [[https://zeit.co/docs/api/#endpoints/domains/check-a-domain-availability][Check a Domain availability]]
   ~GET /v4/domains/status?name~
** TODO [[https://zeit.co/docs/api/#endpoints/domains/check-the-price-of-a-domain][Check the price of a domain]]
   ~GET /v4/domains/price?name~
** TODO [[https://zeit.co/docs/api/#endpoints/dns/list-all-the-dns-records-of-a-domain][List all the DNS records of a domain]]
   ~GET /v2/domains/:domain/records~
** TODO [[https://zeit.co/docs/api/#endpoints/certificates/list-all-the-certificates][List all the certificates]]
   ~GET /v3/now/certs~
** TODO [[https://zeit.co/docs/api/#endpoints/certificates/get-a-single-certificate][Get a single certificate]]
   ~GET /v3/now/certs/:id~
** TODO [[https://zeit.co/docs/api/#endpoints/aliases/list-all-the-aliases][List all the aliases]]
   ~GET /v2/now/aliases~
** TODO [[https://zeit.co/docs/api/#endpoints/aliases/list-aliases-by-deployment][List aliases by deployment]]
   ~GET /v2/now/deployments/:id/aliases~
** TODO [[https://zeit.co/docs/api/#endpoints/secrets/list-all-the-secrets][List all the secrets]]
   ~GET /v2/now/secrets~
** TODO [[https://zeit.co/docs/api/#endpoints/teams/list-all-your-teams][List all your teams]]
   ~GET /v1/teams~
** TODO [[https://zeit.co/docs/api/#endpoints/teams/get-single-team-information][Get single team information]]
   ~GET /v1/teams/:id~
   ~GET /v1/teams?slug~
** TODO [[https://zeit.co/docs/api/#endpoints/teams/get-list-of-team-members][Get list of team members]]
   ~GET /v1/teams/:id/members~
** TODO [[https://zeit.co/docs/api/#endpoints/authentication/verify-loginv][Verify login]]
   ~GET /now/registration/verify?email&token~

* Misc [5/10]
** DONE Refactor [[file:api/schema.ts][schema.ts]]
   - State "DONE"       from "INPROGRESS" [2019-03-17 Sun 15:25]
   - State "INPROGRESS" from "TODO"       [2019-03-17 Sun 14:20]
   - into files that combine typedefs and resolvers for related things
     such as deployment.ts that has everything for deployment and
     deployments

** DONE Enable introspection in prod based on env
   - State "DONE"       from "INPROGRESS" [2019-03-17 Sun 15:45]
   - State "INPROGRESS" from "TODO"       [2019-03-17 Sun 15:40]
** DONE Mask errors and match Zeit api [[https://zeit.co/docs/api/#api-basics/errors][errors schema]]
   - State "DONE"       from "INPROGRESS" [2019-03-17 Sun 16:02]
   - State "INPROGRESS" from "TODO"       [2019-03-17 Sun 15:45]
** DONE Make everything more typesafe
   - State "DONE"       from "INPROGRESS" [2019-03-18 Mon 17:11]
   - State "INPROGRESS" from "TODO"       [2019-03-18 Mon 15:02]
** TODO Fix [[file:api/types/deployment.ts::%5Bkey:%20string%5D:%20any][the index key signature in types/deployment.ts]]
** TODO Fix [[file:api/types/deployments.ts::%5Bkey:%20string%5D:%20any][the index key signature in types/deployments.ts]]
** TODO Fix [[file:api/types/filesInDeployment.ts::%5Bkey:%20string%5D:%20any][the index key signature in types/filesInDeployment.ts]]
** CANCELLED Make delpoyments filterable by deploymentId
   - State "CANCELLED"  from "TODO"       [2019-03-19 Tue 17:20] \\
     Doesn't make sense. Plus it'd ruin the ergonomics by making the user
     do use fragments such as ... on Deployment
   To do so, use a union type SuccinctDeployment | Deployment and
   based on whether a deploymentId is provided as an arg to
   ~deployments~ root field, return one of those two types. More [[https://www.apollographql.com/docs/graphql-tools/resolvers.html#Unions-and-interfaces][on
   this page]].
** TODO Make files filterable by fileId
   Do the same as for deployments with deploymentId
** TODO Collect all the ts types in one big file to not have to work around all the circular dependencies
   for e.g., DeploymentTypeResolver.builds needs the Build interface
   which in turn is housed in file that needs the Deployment
   interface. Fucking hate circular dependencies.
* Running notes
  - It'd be nice to have the ~deployments~ collection endpoint return
    the same shape as a single deployment (~deployments/:id~)
  - In lieu of the point above, it'd be nice if the api either
    provided a way to distinguish the type of owner (team or user) or
    let the user pass any ~ownerId~ for the ~teamId~ query param thus
    not forcing the user to know how to differentiate between types of
    owners.
